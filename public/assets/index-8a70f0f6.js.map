{"version":3,"file":"index-8a70f0f6.js","sources":["../../node_modules/react/cjs/react-jsx-dev-runtime.development.js","../../node_modules/react/jsx-dev-runtime.js","../../node_modules/react-dom/client.js","../../node_modules/@remix-run/router/dist/router.js","../../node_modules/react-router/dist/index.js","../../node_modules/react-router-dom/dist/index.js","../../src/context/AirQualityContext.tsx","../../src/components/LoadingSpinner.tsx","../../src/components/AQICard.tsx","../../src/components/WeatherCard.tsx","../../src/components/TrendChart.tsx","../../src/components/AlertsPanel.tsx","../../src/components/Dashboard.tsx","../../src/components/Header.tsx","../../src/components/Settings.tsx","../../src/components/Historical.tsx","../../src/components/ErrorBoundary.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar React = require('react');\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    {\n      if (hasOwnProperty.call(props, 'key')) {\n        var componentName = getComponentNameFromType(type);\n        var keys = Object.keys(props).filter(function (k) {\n          return k !== 'key';\n        });\n        var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n        if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n          var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n          error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n          didWarnAboutKeySpread[componentName + beforeExample] = true;\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV$1 =  jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV$1;\n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-dev-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-dev-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","/**\n * @remix-run/router v1.23.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/v6/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/v6/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/v6/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/v6/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n *\n * @deprecated The `json` method is deprecated in favor of returning raw objects.\n * This method will be removed in v7.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n/**\n * @deprecated The `defer` method is deprecated in favor of returning raw\n * objects. This method will be removed in v7.\n */\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialMatchesIsFOW = false;\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatchesIsFOW = true;\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate = undefined;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        let nextHistoryUpdatePromise = new Promise(resolve => {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n            nextHistoryUpdatePromise.then(() => init.history.go(delta));\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Remove any lingering deleted fetchers that have already been removed\n    // from state.fetchers\n    deletedFetchers.forEach(key => {\n      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {\n        deletedFetchersKeys.push(key);\n      }\n    });\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      viewTransitionOpts: opts.viewTransitionOpts,\n      flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    } else {\n      // We already called deleteFetcher() on these, can remove them from this\n      // Set now that we've handed the keys off to the data layer\n      deletedFetchersKeys.forEach(key => deletedFetchers.delete(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = opts != null && opts.initialHydration && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ?\n    // `matchRoutes()` has already been called if we're in here via `router.initialize()`\n    state.matches : matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (matches && state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error: discoverResult.error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = _extends({}, state.errors, errors);\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n    let actionResult = actionResults[match.route.id];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n    let result = results[match.route.id];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n    try {\n      results = await callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach(m => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n    return dataResults;\n  }\n  async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {\n    let currentMatches = state.matches;\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async f => {\n      if (f.matches && f.match && f.controller) {\n        let results = await callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n        let result = results[f.match.route.id];\n        // Fetcher results are keyed by fetcher key from here on out, not routeId\n        return {\n          [f.key]: result\n        };\n      } else {\n        return Promise.resolve({\n          [f.key]: {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          }\n        });\n      }\n    }));\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});\n    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n    // If this fetcher was previously marked for deletion, unmark it since we\n    // have a new instance\n    if (deletedFetchers.has(key)) {\n      deletedFetchers.delete(key);\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    // If we opted into the flag we can clear this now since we're calling\n    // deleteFetcher() at the end of updateState() and we've already handed the\n    // deleted fetcher keys off to the data layer.\n    // If not, we're eagerly calling deleteFetcher() and we need to keep this\n    // Set populated until the next updateState call, and we'll clear\n    // `deletedFetchers` then\n    if (future.v7_fetcherPersist) {\n      deletedFetchers.delete(key);\n    }\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    let count = (activeFetchers.get(key) || 0) - 1;\n    if (count <= 0) {\n      activeFetchers.delete(key);\n      deletedFetchers.add(key);\n      if (!future.v7_fetcherPersist) {\n        deleteFetcher(key);\n      }\n    } else {\n      activeFetchers.set(key, count);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal, fetcherKey) {\n    if (!patchRoutesOnNavigationImpl) {\n      return {\n        type: \"success\",\n        matches\n      };\n    }\n    let partialMatches = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          signal,\n          path: pathname,\n          matches: partialMatches,\n          fetcherKey,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);\n          }\n        });\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return {\n          type: \"success\",\n          matches: newMatches\n        };\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n      // Avoid loops if the second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {\n        return {\n          type: \"success\",\n          matches: null\n        };\n      }\n      partialMatches = newPartialMatches;\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n    let dataResults = {};\n    await Promise.all(matches.map(async match => {\n      if (!(match.route.id in results)) {\n        return;\n      }\n      let result = results[match.route.id];\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n    }));\n    return dataResults;\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {\n  if (includeBoundary === void 0) {\n    includeBoundary = false;\n  }\n  let index = matches.findIndex(m => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);\n  }\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (initialHydration || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  var _childrenToPatch;\n  let childrenToPatch;\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(newRoute => !childrenToPatch.some(existingRoute => isSameRoute(newRoute, existingRoute)));\n  let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || \"_\", \"patch\", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || \"0\")], manifest);\n  childrenToPatch.push(...newRoutes);\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  // Most optimal check is by id\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n  // Second is by pathing differences\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children.every((aChild, i) => {\n    var _existingRoute$childr;\n    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some(bChild => isSameRoute(aChild, bChild));\n  });\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy(_ref4) {\n  let {\n    matches\n  } = _ref4;\n  let matchesToLoad = matches.filter(m => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map(m => m.resolve()));\n  return results.reduce((acc, result, i) => Object.assign(acc, {\n    [matchesToLoad[i].route.id]: result\n  }), {});\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(m => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some(m => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve = async handlerOverride => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n      return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n        type: ResultType.data,\n        result: undefined\n      });\n    };\n    return _extends({}, match, {\n      shouldLoad,\n      resolve\n    });\n  });\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  });\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n  return results;\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride(ctx => actualHandler(ctx)) : actualHandler());\n        return {\n          type: \"data\",\n          result: val\n        };\n      } catch (e) {\n        return {\n          type: \"error\",\n          result: e\n        };\n      }\n    })();\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadRoutePromise]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let {\n    result,\n    type\n  } = dataStrategyResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init3, _result$init4;\n      if (result.data instanceof Error) {\n        var _result$init, _result$init2;\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n          headers: (_result$init2 = result.init) != null && _result$init2.headers ? new Headers(result.init.headers) : undefined\n        };\n      }\n      // Convert thrown data() to ErrorResponse instances\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(((_result$init3 = result.init) == null ? void 0 : _result$init3.status) || 500, undefined, result.data),\n        statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n        headers: (_result$init4 = result.init) != null && _result$init4.headers ? new Headers(result.init.headers) : undefined\n      };\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init5, _result$init6;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: ((_result$init6 = result.init) == null ? void 0 : _result$init6.headers) && new Headers(result.init.headers)\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    var _result$init7, _result$init8;\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init7 = result.init) == null ? void 0 : _result$init7.status,\n      headers: (_result$init8 = result.init) != null && _result$init8.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach(match => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(rf => {\n    let {\n      key,\n      match,\n      controller\n    } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return {\n        key,\n        result\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then(result => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      routeId,\n      controller\n    } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, controller.signal, true).then(result => {\n        if (result) {\n          results[key] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, data, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/**\n * React Router v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_invariant, joinPaths, matchPath, UNSAFE_decodePath, UNSAFE_getResolveToMatches, UNSAFE_warning, resolveTo, parsePath, matchRoutes, Action, UNSAFE_convertRouteMatchToUiMatch, stripBasename, IDLE_BLOCKER, isRouteErrorResponse, createMemoryHistory, AbortedDeferredError, createRouter } from '@remix-run/router';\nexport { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, replace, resolvePath } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nconst DataRouterContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterContext.displayName = \"DataRouter\";\n}\nconst DataRouterStateContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\nconst AwaitContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  AwaitContext.displayName = \"Await\";\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nconst LocationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nconst RouteContext = /*#__PURE__*/React.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n}\nconst RouteErrorContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/v6/hooks/use-href\n */\nfunction useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-in-router-context\n */\nfunction useInRouterContext() {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/v6/hooks/use-location\n */\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigation-type\n */\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-match\n */\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return React.useMemo(() => matchPath(pattern, UNSAFE_decodePath(pathname)), [pathname, pattern]);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\nconst navigateEffectWarning = \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\";\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigate\n */\nfunction useNavigate() {\n  let {\n    isDataRoute\n  } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let {\n    basename,\n    future,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our history listener yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\");\n\n    // If we're operating within a basename, prepend it to the pathname prior\n    // to handing off to history (but only if we're not in a data router,\n    // otherwise it'll prepend the basename inside of the router).\n    // If this is a root navigation, then we navigate to the raw basename\n    // which allows the basename to have full control over the presence of a\n    // trailing slash on root links\n    if (dataRouterContext == null && basename !== \"/\") {\n      path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/React.createContext(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/v6/hooks/use-outlet-context\n */\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/v6/hooks/use-outlet\n */\nfunction useOutlet(context) {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/React.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/v6/hooks/use-params\n */\nfunction useParams() {\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/v6/hooks/use-resolved-path\n */\nfunction useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    future\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route's\n * element.\n *\n * @see https://reactrouter.com/v6/hooks/use-routes\n */\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches: parentMatches\n  } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : UNSAFE_invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== \"/\") {\n    // Determine the remaining pathname by removing the # of URL segments the\n    // parentPathnameBase has, instead of removing based on character count.\n    // This is because we can't guarantee that incoming/outgoing encodings/\n    // decodings will match exactly.\n    // We decode paths before matching on a per-segment basis with\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\n    // match what `window.location.pathname` would reflect.  Those don't 100%\n    // align when it comes to encoded URI characters such as % and &.\n    //\n    // So we may end up with:\n    //   pathname:           \"/descendant/a%25b/match\"\n    //   parentPathnameBase: \"/descendant/a%b\"\n    //\n    // And the direct substring removal approach won't work :/\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\n  }\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined || matches[matches.length - 1].route.lazy !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterState, future);\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/React.createElement(LocationContext.Provider, {\n      value: {\n        location: _extends({\n          pathname: \"/\",\n          search: \"\",\n          hash: \"\",\n          state: null,\n          key: \"default\"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = {\n    padding: \"0.5rem\",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: \"2px 4px\",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n  if (process.env.NODE_ENV !== \"production\") {\n    console.error(\"Error handled by React Router default ErrorBoundary:\", error);\n    devInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"ErrorBoundary\"), \" or\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"errorElement\"), \" prop on your route.\"));\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, message), stack ? /*#__PURE__*/React.createElement(\"pre\", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\nconst defaultErrorElement = /*#__PURE__*/React.createElement(DefaultErrorComponent, null);\nclass RenderErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"React Router caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    return this.state.error !== undefined ? /*#__PURE__*/React.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/React.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n}\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /*#__PURE__*/React.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\nfunction _renderMatches(matches, parentMatches, dataRouterState, future) {\n  var _dataRouterState;\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (dataRouterState === void 0) {\n    dataRouterState = null;\n  }\n  if (future === void 0) {\n    future = null;\n  }\n  if (matches == null) {\n    var _future;\n    if (!dataRouterState) {\n      return null;\n    }\n    if (dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {\n      // Don't bail if we're initializing with partial hydration and we have\n      // router matches.  That means we're actively running `patchRoutesOnNavigation`\n      // so we should render down the partial matches to the appropriate\n      // `HydrateFallback`.  We only do this if `parentMatches` is empty so it\n      // only impacts the root matches for `RouterProvider` and no descendant\n      // `<Routes>`\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== undefined);\n    !(errorIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"Could not find a matching route for errors on route IDs: \" + Object.keys(errors).join(\",\")) : UNSAFE_invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n\n  // If we're in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (match.route.id) {\n        let {\n          loaderData,\n          errors\n        } = dataRouterState;\n        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that's not ready to render (waiting on\n          // lazy, or has a loader that hasn't run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error;\n    let shouldRenderHydrateFallback = false;\n    let errorElement = null;\n    let hydrateFallbackElement = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\"route-fallback\", false, \"No `HydrateFallback` element provided to render during initial hydration\");\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = /*#__PURE__*/React.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /*#__PURE__*/React.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches,\n          isDataRoute: dataRouterState != null\n        },\n        children: children\n      });\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      revalidation: dataRouterState.revalidation,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches,\n        isDataRoute: true\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\n  DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterHook[\"UseNavigateStable\"] = \"useNavigate\";\n  return DataRouterHook;\n}(DataRouterHook || {});\nvar DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\n  DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\n  DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\n  DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\n  DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\n  DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\n  DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterStateHook[\"UseNavigateStable\"] = \"useNavigate\";\n  DataRouterStateHook[\"UseRouteId\"] = \"useRouteId\";\n  return DataRouterStateHook;\n}(DataRouterStateHook || {});\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nfunction useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nfunction useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(() => ({\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  }), [dataRouterContext.router.revalidate, state.revalidation]);\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nfunction useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(m => UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nfunction useRouteError() {\n  var _state$errors;\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nfunction useBlocker(shouldBlock) {\n  let {\n    router,\n    basename\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback(arg => {\n    if (typeof shouldBlock !== \"function\") {\n      return !!shouldBlock;\n    }\n    if (basename === \"/\") {\n      return shouldBlock(arg);\n    }\n\n    // If they provided us a function and we've got an active basename, strip\n    // it from the locations we expose to the user to match the behavior of\n    // useLocation\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = arg;\n    return shouldBlock({\n      currentLocation: _extends({}, currentLocation, {\n        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n      }),\n      nextLocation: _extends({}, nextLocation, {\n        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n      }),\n      historyAction\n    });\n  }, [basename, shouldBlock]);\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our router subscriber yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      router.navigate(to);\n    } else {\n      router.navigate(to, _extends({\n        fromRouteId: id\n      }, options));\n    }\n  }, [router, id]);\n  return navigate;\n}\nconst alreadyWarned$1 = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned$1[key]) {\n    alreadyWarned$1[key] = true;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, message) : void 0;\n  }\n}\n\nconst alreadyWarned = {};\nfunction warnOnce(key, message) {\n  if (process.env.NODE_ENV !== \"production\" && !alreadyWarned[message]) {\n    alreadyWarned[message] = true;\n    console.warn(message);\n  }\n}\nconst logDeprecation = (flag, msg, link) => warnOnce(flag, \"\\u26A0\\uFE0F React Router Future Flag Warning: \" + msg + \". \" + (\"You can use the `\" + flag + \"` future flag to opt-in early. \") + (\"For more information, see \" + link + \".\"));\nfunction logV6DeprecationWarnings(renderFuture, routerFuture) {\n  if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === undefined) {\n    logDeprecation(\"v7_startTransition\", \"React Router will begin wrapping state updates in `React.startTransition` in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_starttransition\");\n  }\n  if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === undefined && (!routerFuture || routerFuture.v7_relativeSplatPath === undefined)) {\n    logDeprecation(\"v7_relativeSplatPath\", \"Relative route resolution within Splat routes is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath\");\n  }\n  if (routerFuture) {\n    if (routerFuture.v7_fetcherPersist === undefined) {\n      logDeprecation(\"v7_fetcherPersist\", \"The persistence behavior of fetchers is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist\");\n    }\n    if (routerFuture.v7_normalizeFormMethod === undefined) {\n      logDeprecation(\"v7_normalizeFormMethod\", \"Casing of `formMethod` fields is being normalized to uppercase in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod\");\n    }\n    if (routerFuture.v7_partialHydration === undefined) {\n      logDeprecation(\"v7_partialHydration\", \"`RouterProvider` hydration behavior is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_partialhydration\");\n    }\n    if (routerFuture.v7_skipActionErrorRevalidation === undefined) {\n      logDeprecation(\"v7_skipActionErrorRevalidation\", \"The revalidation behavior after 4xx/5xx `action` responses is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation\");\n    }\n  }\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    if (v7_startTransition && startTransitionImpl) {\n      startTransitionImpl(() => setStateImpl(newState));\n    } else {\n      setStateImpl(newState);\n    }\n  }, [setStateImpl, v7_startTransition]);\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  React.useEffect(() => logV6DeprecationWarnings(future, router.future), [router, future]);\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))), null);\n}\nfunction DataRoutes(_ref2) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref2;\n  return useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/v6/router-components/memory-router\n */\nfunction MemoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex,\n    future\n  } = _ref3;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/v6/components/navigate\n */\nfunction Navigate(_ref4) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref4;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    future,\n    static: isStatic\n  } = React.useContext(NavigationContext);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(!isStatic, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(to, UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === \"path\");\n  let jsonPath = JSON.stringify(path);\n  React.useEffect(() => navigate(JSON.parse(jsonPath), {\n    replace,\n    state,\n    relative\n  }), [navigate, jsonPath, relative, replace, state]);\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/v6/components/outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/v6/components/route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : UNSAFE_invariant(false) ;\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/v6/router-components/router\n */\nfunction Router(_ref5) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false,\n    future\n  } = _ref5;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : UNSAFE_invariant(false) : void 0;\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp,\n    future: _extends({\n      v7_relativeSplatPath: false\n    }, future)\n  }), [basename, future, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (locationContext == null) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/React.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n}\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/v6/components/routes\n */\nfunction Routes(_ref6) {\n  let {\n    children,\n    location\n  } = _ref6;\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nfunction Await(_ref7) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\n  AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\n  AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\n  return AwaitRenderStatus;\n}(AwaitRenderStatus || {});\nconst neverSettledPromise = new Promise(() => {});\nclass AwaitErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"<Await> caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_data\", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_error\", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = \"_error\" in promise ? AwaitRenderStatus.error : \"_data\" in promise ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, \"_error\", {\n        get: () => error\n      }));\n    }\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait(_ref8) {\n  let {\n    children\n  } = _ref8;\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/v6/utils/create-routes-from-children\n */\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  let routes = [];\n  React.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : UNSAFE_invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"An index route cannot have child routes.\") : UNSAFE_invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.element) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`Component` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      element: /*#__PURE__*/React.createElement(route.Component),\n      Component: undefined\n    });\n  }\n  if (route.HydrateFallback) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.hydrateFallbackElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - \" + \"`HydrateFallback` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      hydrateFallbackElement: /*#__PURE__*/React.createElement(route.HydrateFallback),\n      HydrateFallback: undefined\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.errorElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`ErrorBoundary` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation\n  }).initialize();\n}\n\nexport { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, DataRouterContext as UNSAFE_DataRouterContext, DataRouterStateContext as UNSAFE_DataRouterStateContext, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, logV6DeprecationWarnings as UNSAFE_logV6DeprecationWarnings, mapRouteProperties as UNSAFE_mapRouteProperties, useRouteId as UNSAFE_useRouteId, useRoutesImpl as UNSAFE_useRoutesImpl, createMemoryRouter, createRoutesFromChildren, createRoutesFromChildren as createRoutesFromElements, renderMatches, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes };\n//# sourceMappingURL=index.js.map\n","/**\n * React Router DOM v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { UNSAFE_mapRouteProperties, UNSAFE_logV6DeprecationWarnings, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Router, UNSAFE_useRoutesImpl, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, useBlocker } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, replace, resolvePath, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, UNSAFE_ErrorResponseImpl, UNSAFE_invariant, joinPaths, IDLE_FETCHER, matchPath } from '@remix-run/router';\nexport { UNSAFE_ErrorResponseImpl } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\", \"viewTransition\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"viewTransition\", \"children\"],\n  _excluded3 = [\"fetcherKey\", \"navigate\", \"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"relative\", \"preventScrollReset\", \"viewTransition\"];\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"6\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nconst ViewTransitionContext = /*#__PURE__*/React.createContext({\n  isTransitioning: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\nconst FetchersContext = /*#__PURE__*/React.createContext(new Map());\nif (process.env.NODE_ENV !== \"production\") {\n  FetchersContext.displayName = \"Fetchers\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\nfunction startTransitionSafe(cb) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nfunction flushSyncSafe(cb) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\nclass Deferred {\n  constructor() {\n    this.status = \"pending\";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = value => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = reason => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState();\n  let [vtContext, setVtContext] = React.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React.useState();\n  let [transition, setTransition] = React.useState();\n  let [interruption, setInterruption] = React.useState();\n  let fetcherData = React.useRef(new Map());\n  let {\n    v7_startTransition\n  } = future || {};\n  let optInStartTransition = React.useCallback(cb => {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  let setState = React.useCallback((newState, _ref2) => {\n    let {\n      deletedFetchers,\n      flushSync: flushSync,\n      viewTransitionOpts: viewTransitionOpts\n    } = _ref2;\n    newState.fetchers.forEach((fetcher, key) => {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\n    let isViewTransitionUnavailable = router.window == null || router.window.document == null || typeof router.window.document.startViewTransition !== \"function\";\n    // If this isn't a view transition or it's not available in this browser,\n    // just update and be done with it\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\n      if (flushSync) {\n        flushSyncSafe(() => setStateImpl(newState));\n      } else {\n        optInStartTransition(() => setStateImpl(newState));\n      }\n      return;\n    }\n    // flushSync + startViewTransition\n    if (flushSync) {\n      // Flush through the context to mark DOM elements as transition=ing\n      flushSyncSafe(() => {\n        // Cancel any pending transitions\n        if (transition) {\n          renderDfd && renderDfd.resolve();\n          transition.skipTransition();\n        }\n        setVtContext({\n          isTransitioning: true,\n          flushSync: true,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      });\n      // Update the DOM\n      let t = router.window.document.startViewTransition(() => {\n        flushSyncSafe(() => setStateImpl(newState));\n      });\n      // Clean up after the animation completes\n      t.finished.finally(() => {\n        flushSyncSafe(() => {\n          setRenderDfd(undefined);\n          setTransition(undefined);\n          setPendingState(undefined);\n          setVtContext({\n            isTransitioning: false\n          });\n        });\n      });\n      flushSyncSafe(() => setTransition(t));\n      return;\n    }\n    // startTransition + startViewTransition\n    if (transition) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd && renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let 'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  let routerFuture = React.useMemo(() => ({\n    v7_relativeSplatPath: router.future.v7_relativeSplatPath\n  }), [router.future.v7_relativeSplatPath]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future, router.future), [future, router.future]);\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: routerFuture\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(MemoizedDataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))))), null);\n}\n// Memoize to avoid re-renders when updating `ViewTransitionContext`\nconst MemoizedDataRoutes = /*#__PURE__*/React.memo(DataRoutes);\nfunction DataRoutes(_ref3) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref3;\n  return UNSAFE_useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref4;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref5;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref6;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref7, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      viewTransition\n    } = _ref7,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative,\n    viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      viewTransition,\n      children\n    } = _ref8,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator,\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && viewTransition === true;\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  if (nextLocationPathname && basename) {\n    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n  }\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n  // we're looking for a slash _after_ what's in `to`.  For example:\n  //\n  // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n  // both want to look for a / at index 6 to match URL `/users/matt`\n  const endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let renderProps = {\n    isActive,\n    isPending,\n    isTransitioning\n  };\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null, isTransitioning ? \"transitioning\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    viewTransition: viewTransition\n  }), typeof children === \"function\" ? children(renderProps) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((_ref9, forwardedRef) => {\n  let {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      viewTransition\n    } = _ref9,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  let submit = useSubmit();\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey,\n      method: submitMethod,\n      navigate,\n      replace,\n      state,\n      relative,\n      preventScrollReset,\n      viewTransition\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  let {\n    getKey,\n    storageKey\n  } = _ref10;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterHook[\"useViewTransitionState\"] = \"useViewTransitionState\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n// Internal hooks\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    viewTransition\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative,\n        viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => \"__\" + String(++fetcherId) + \"__\";\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    if (options.navigate === false) {\n      let key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        flushSync: options.flushSync\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        flushSync: options.flushSync,\n        viewTransition: options.viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    let indexValues = params.getAll(\"index\");\n    let hasNakedIndexParam = indexValues.some(v => v === \"\");\n    if (hasNakedIndexParam) {\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  let {\n    key\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(UNSAFE_RouteContext);\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a FetchersContext\") : UNSAFE_invariant(false) : void 0;\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  let load = React.useCallback((href, opts) => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href, opts);\n  }, [fetcherKey, routeId, router]);\n  let submitImpl = useSubmit();\n  let submit = React.useCallback((target, opts) => {\n    submitImpl(target, _extends({}, opts, {\n      navigate: false,\n      fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n      return /*#__PURE__*/React.createElement(Form, _extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form: FetcherForm,\n    submit,\n    load\n  }, fetcher, {\n    data\n  }), [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\n    let [key, fetcher] = _ref11;\n    return _extends({}, fetcher, {\n      key\n    });\n  });\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  let {\n    getKey,\n    storageKey\n  } = _temp4 === void 0 ? {} : _temp4;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (\" + error + \").\") : void 0;\n    }\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  let {\n    when,\n    message\n  } = _ref12;\n  let blocker = useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let vtContext = React.useContext(ViewTransitionContext);\n  !(vtContext != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" + \"Did you accidentally import `RouterProvider` from `react-router`?\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename\n  } = useDataRouterContext(DataRouterHook.useViewTransitionState);\n  let path = useResolvedPath(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, RouterProvider, ScrollRestoration, FetchersContext as UNSAFE_FetchersContext, ViewTransitionContext as UNSAFE_ViewTransitionContext, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit, useViewTransitionState };\n//# sourceMappingURL=index.js.map\n","import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\n\r\nexport interface AirQualityData {\r\n  timestamp: string;\r\n  pm25: number;\r\n  pm10: number;\r\n  temperature: number;\r\n  humidity: number;\r\n  aqi: number;\r\n  aqiCategory: string;\r\n  location?: string;\r\n}\r\n\r\nexport interface AirQualityContextType {\r\n  currentData: AirQualityData | null;\r\n  historicalData: AirQualityData[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  lastUpdated: Date | null;\r\n  refreshData: () => Promise<void>;\r\n  fetchHistoricalData: (days?: number) => Promise<void>;\r\n}\r\n\r\nconst AirQualityContext = createContext<AirQualityContextType | undefined>(undefined);\r\n\r\ninterface AirQualityProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const AirQualityProvider = ({ children }: AirQualityProviderProps) => {\r\n  const [currentData, setCurrentData] = useState<AirQualityData | null>(null);\r\n  const [historicalData, setHistoricalData] = useState<AirQualityData[]>([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\r\n\r\n  const fetchCurrentData = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      const response = await fetch('/api/data/latest');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success && data.data) {\r\n        setCurrentData(data.data);\r\n        setLastUpdated(new Date());\r\n      } else {\r\n        throw new Error(data.message || 'Failed to fetch current data');\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\r\n      setError(errorMessage);\r\n      console.error('Error fetching current data:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const fetchHistoricalData = useCallback(async (days: number = 7) => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      const response = await fetch(`/api/data/historical?days=${days}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success && data.data) {\r\n        setHistoricalData(data.data);\r\n      } else {\r\n        throw new Error(data.message || 'Failed to fetch historical data');\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\r\n      setError(errorMessage);\r\n      console.error('Error fetching historical data:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const refreshData = useCallback(async () => {\r\n    await Promise.all([\r\n      fetchCurrentData(),\r\n      fetchHistoricalData()\r\n    ]);\r\n  }, [fetchCurrentData, fetchHistoricalData]);\r\n\r\n  // Auto-refresh data every 5 minutes\r\n  useEffect(() => {\r\n    fetchCurrentData();\r\n    const interval = setInterval(fetchCurrentData, 5 * 60 * 1000);\r\n    return () => clearInterval(interval);\r\n  }, [fetchCurrentData]);\r\n\r\n  const contextValue: AirQualityContextType = {\r\n    currentData,\r\n    historicalData,\r\n    isLoading,\r\n    error,\r\n    lastUpdated,\r\n    refreshData,\r\n    fetchHistoricalData\r\n  };\r\n\r\n  return (\r\n    <AirQualityContext.Provider value={contextValue}>\r\n      {children}\r\n    </AirQualityContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAirQuality = (): AirQualityContextType => {\r\n  const context = useContext(AirQualityContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAirQuality must be used within an AirQualityProvider');\r\n  }\r\n  return context;\r\n};","import React from 'react';\r\n\r\ninterface LoadingSpinnerProps {\r\n  message?: string;\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\nexport const LoadingSpinner = ({ \r\n  message = 'Loading...', \r\n  size = 'md' \r\n}: LoadingSpinnerProps) => {\r\n  const sizeClasses = {\r\n    sm: 'w-4 h-4',\r\n    md: 'w-8 h-8',\r\n    lg: 'w-12 h-12'\r\n  };\r\n\r\n  const currentSizeClass = sizeClasses[size];\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center space-y-4\">\r\n      <div \r\n        className={`${currentSizeClass} border-4 border-gray-200 border-t-blue-600 rounded-full animate-spin`}\r\n        role=\"status\"\r\n        aria-label=\"Loading\"\r\n      />\r\n      {message && (\r\n        <p className=\"text-gray-600 dark:text-gray-400 text-sm font-medium\">\r\n          {message}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { AirQualityData } from '../context/AirQualityContext';\r\n\r\ninterface AQICardProps {\r\n  data: AirQualityData | null;\r\n}\r\n\r\nexport const AQICard = ({ data }: AQICardProps) => {\r\n  if (!data) {\r\n    return (\r\n      <div className=\"widget-card\">\r\n        <div className=\"text-center py-8\">\r\n          <div className=\"text-gray-400 text-4xl mb-2\">📊</div>\r\n          <p className=\"text-gray-500 dark:text-gray-400\">No AQI data available</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const getAQIColor = (aqi: number) => {\r\n    if (aqi <= 50) return 'text-green-600 bg-green-50 border-green-200';\r\n    if (aqi <= 100) return 'text-yellow-600 bg-yellow-50 border-yellow-200';\r\n    if (aqi <= 150) return 'text-orange-600 bg-orange-50 border-orange-200';\r\n    if (aqi <= 200) return 'text-red-600 bg-red-50 border-red-200';\r\n    if (aqi <= 300) return 'text-purple-600 bg-purple-50 border-purple-200';\r\n    return 'text-gray-100 bg-gray-800 border-gray-700';\r\n  };\r\n\r\n  const getAQIStatus = (aqi: number) => {\r\n    if (aqi <= 50) return { status: 'Good', emoji: '😊' };\r\n    if (aqi <= 100) return { status: 'Moderate', emoji: '😐' };\r\n    if (aqi <= 150) return { status: 'Unhealthy for Sensitive Groups', emoji: '😷' };\r\n    if (aqi <= 200) return { status: 'Unhealthy', emoji: '😨' };\r\n    if (aqi <= 300) return { status: 'Very Unhealthy', emoji: '🚨' };\r\n    return { status: 'Hazardous', emoji: '☠️' };\r\n  };\r\n\r\n  const aqiInfo = getAQIStatus(data.aqi);\r\n  const colorClasses = getAQIColor(data.aqi);\r\n\r\n  return (\r\n    <div className=\"widget-card\">\r\n      <div className=\"text-center\">\r\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-6\">\r\n          Air Quality Index\r\n        </h2>\r\n        \r\n        <div className={`inline-flex items-center justify-center w-32 h-32 rounded-full border-4 ${colorClasses} mb-4`}>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-3xl font-bold\">{data.aqi}</div>\r\n            <div className=\"text-sm font-medium\">AQI</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <div className=\"flex items-center justify-center space-x-2\">\r\n            <span className=\"text-2xl\">{aqiInfo.emoji}</span>\r\n            <span className=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n              {aqiInfo.status}\r\n            </span>\r\n          </div>\r\n          \r\n          {data.location && (\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n              📍 {data.location}\r\n            </p>\r\n          )}\r\n          \r\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n            Updated: {new Date(data.timestamp).toLocaleTimeString()}\r\n          </p>\r\n        </div>\r\n\r\n        {/* Pollutant Details */}\r\n        <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\r\n          <h3 className=\"text-sm font-medium text-gray-900 dark:text-white mb-3\">\r\n            Pollutant Levels\r\n          </h3>\r\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n            <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n              <div className=\"font-semibold text-gray-900 dark:text-white\">\r\n                {data.pm25}\r\n              </div>\r\n              <div className=\"text-gray-600 dark:text-gray-400\">PM2.5 μg/m³</div>\r\n            </div>\r\n            <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n              <div className=\"font-semibold text-gray-900 dark:text-white\">\r\n                {data.pm10}\r\n              </div>\r\n              <div className=\"text-gray-600 dark:text-gray-400\">PM10 μg/m³</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { AirQualityData } from '../context/AirQualityContext';\r\n\r\ninterface WeatherCardProps {\r\n  data: AirQualityData | null;\r\n}\r\n\r\nexport const WeatherCard = ({ data }: WeatherCardProps) => {\r\n  if (!data) {\r\n    return (\r\n      <div className=\"widget-card\">\r\n        <div className=\"text-center py-8\">\r\n          <div className=\"text-gray-400 text-4xl mb-2\">🌡️</div>\r\n          <p className=\"text-gray-500 dark:text-gray-400\">No weather data available</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const getTemperatureColor = (temp: number) => {\r\n    if (temp < 0) return 'text-blue-600';\r\n    if (temp < 10) return 'text-blue-500';\r\n    if (temp < 20) return 'text-green-500';\r\n    if (temp < 30) return 'text-yellow-500';\r\n    return 'text-red-500';\r\n  };\r\n\r\n  const getHumidityColor = (humidity: number) => {\r\n    if (humidity < 30) return 'text-yellow-600';\r\n    if (humidity < 60) return 'text-green-600';\r\n    return 'text-blue-600';\r\n  };\r\n\r\n  return (\r\n    <div className=\"widget-card\">\r\n      <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n        Weather Conditions\r\n      </h2>\r\n      \r\n      <div className=\"grid grid-cols-2 gap-6\">\r\n        {/* Temperature */}\r\n        <div className=\"text-center\">\r\n          <div className=\"text-4xl mb-2\">🌡️</div>\r\n          <div className={`text-3xl font-bold ${getTemperatureColor(data.temperature)}`}>\r\n            {data.temperature}°C\r\n          </div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Temperature</div>\r\n        </div>\r\n\r\n        {/* Humidity */}\r\n        <div className=\"text-center\">\r\n          <div className=\"text-4xl mb-2\">💧</div>\r\n          <div className={`text-3xl font-bold ${getHumidityColor(data.humidity)}`}>\r\n            {data.humidity}%\r\n          </div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Humidity</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Additional Weather Info */}\r\n      <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\r\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <span className=\"text-gray-600 dark:text-gray-400\">Feels like:</span>\r\n            <span className=\"font-medium text-gray-900 dark:text-white\">\r\n              {(data.temperature + 2).toFixed(1)}°C\r\n            </span>\r\n          </div>\r\n          <div className=\"flex items-center justify-between\">\r\n            <span className=\"text-gray-600 dark:text-gray-400\">Comfort:</span>\r\n            <span className=\"font-medium text-gray-900 dark:text-white\">\r\n              {data.humidity > 60 ? 'Humid' : data.humidity < 30 ? 'Dry' : 'Comfortable'}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { AirQualityData } from '../context/AirQualityContext';\r\n\r\ninterface TrendChartProps {\r\n  data: AirQualityData[];\r\n  title: string;\r\n  dataKey: keyof AirQualityData;\r\n  color: string;\r\n  unit: string;\r\n}\r\n\r\nexport const TrendChart = ({\r\n  data,\r\n  title,\r\n  dataKey,\r\n  color,\r\n  unit\r\n}: TrendChartProps) => {\r\n  if (!data || data.length === 0) {\r\n    return (\r\n      <div className=\"widget-card\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n          {title}\r\n        </h3>\r\n        <div className=\"flex items-center justify-center h-64\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-gray-400 text-4xl mb-2\">📈</div>\r\n            <p className=\"text-gray-500 dark:text-gray-400\">No trend data available</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentValue = data[data.length - 1]?.[dataKey];\r\n  const previousValue = data[data.length - 2]?.[dataKey];\r\n  const trend = currentValue && previousValue ? \r\n    Number(currentValue) - Number(previousValue) : 0;\r\n\r\n  // Simple data points for visual representation\r\n  const recentData = data.slice(-24); // Last 24 readings\r\n  const maxValue = Math.max(...recentData.map(item => Number(item[dataKey])));\r\n  const minValue = Math.min(...recentData.map(item => Number(item[dataKey])));\r\n\r\n  return (\r\n    <div className=\"widget-card\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n          {title}\r\n        </h3>\r\n        <div className=\"text-right\">\r\n          <div className=\"text-2xl font-bold\" style={{ color }}>\r\n            {currentValue} {unit}\r\n          </div>\r\n          {trend !== 0 && (\r\n            <div className={`text-sm ${trend > 0 ? 'text-red-500' : 'text-green-500'}`}>\r\n              {trend > 0 ? '↗' : '↘'} {Math.abs(trend).toFixed(1)}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Simple trend visualization */}\r\n      <div className=\"h-64 flex items-end justify-between space-x-1 bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\r\n        {recentData.map((item, index) => {\r\n          const value = Number(item[dataKey]);\r\n          const height = ((value - minValue) / (maxValue - minValue)) * 200 || 10;\r\n          return (\r\n            <div\r\n              key={index}\r\n              className=\"flex-1 min-w-0 rounded-t\"\r\n              style={{\r\n                height: `${height}px`,\r\n                backgroundColor: color,\r\n                opacity: 0.7 + (index / recentData.length) * 0.3\r\n              }}\r\n              title={`${new Date(item.timestamp).toLocaleTimeString()}: ${value} ${unit}`}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      \r\n      <div className=\"mt-4 flex items-center justify-between text-sm text-gray-600 dark:text-gray-400\">\r\n        <span>Last 24 readings</span>\r\n        <span>{data.length} data points</span>\r\n      </div>\r\n      \r\n      <div className=\"mt-2 flex items-center justify-between text-xs text-gray-500 dark:text-gray-500\">\r\n        <span>Min: {minValue.toFixed(1)} {unit}</span>\r\n        <span>Max: {maxValue.toFixed(1)} {unit}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { AirQualityData } from '../context/AirQualityContext';\r\n\r\ninterface AlertsPanelProps {\r\n  data: AirQualityData | null;\r\n}\r\n\r\ninterface Alert {\r\n  id: string;\r\n  type: 'info' | 'warning' | 'danger';\r\n  title: string;\r\n  message: string;\r\n  icon: string;\r\n}\r\n\r\nexport const AlertsPanel = ({ data }: AlertsPanelProps) => {\r\n  const generateAlerts = (data: AirQualityData | null): Alert[] => {\r\n    if (!data) return [];\r\n\r\n    const alerts: Alert[] = [];\r\n\r\n    // AQI-based alerts\r\n    if (data.aqi > 150) {\r\n      alerts.push({\r\n        id: 'aqi-unhealthy',\r\n        type: 'danger',\r\n        title: 'Unhealthy Air Quality',\r\n        message: 'Consider limiting outdoor activities and wearing a mask when outside.',\r\n        icon: '🚨'\r\n      });\r\n    } else if (data.aqi > 100) {\r\n      alerts.push({\r\n        id: 'aqi-sensitive',\r\n        type: 'warning',\r\n        title: 'Unhealthy for Sensitive Groups',\r\n        message: 'People with respiratory conditions should limit outdoor exposure.',\r\n        icon: '⚠️'\r\n      });\r\n    }\r\n\r\n    // PM2.5 specific alerts\r\n    if (data.pm25 > 35) {\r\n      alerts.push({\r\n        id: 'pm25-high',\r\n        type: data.pm25 > 55 ? 'danger' : 'warning',\r\n        title: 'High PM2.5 Levels',\r\n        message: `PM2.5 concentration is ${data.pm25} μg/m³. Consider using air purifiers indoors.`,\r\n        icon: '🌫️'\r\n      });\r\n    }\r\n\r\n    // Temperature alerts\r\n    if (data.temperature > 35) {\r\n      alerts.push({\r\n        id: 'temp-high',\r\n        type: 'warning',\r\n        title: 'High Temperature',\r\n        message: 'Stay hydrated and avoid prolonged outdoor exposure during peak hours.',\r\n        icon: '🌡️'\r\n      });\r\n    } else if (data.temperature < 0) {\r\n      alerts.push({\r\n        id: 'temp-low',\r\n        type: 'warning',\r\n        title: 'Freezing Temperature',\r\n        message: 'Dress warmly and be cautious of icy conditions.',\r\n        icon: '❄️'\r\n      });\r\n    }\r\n\r\n    // Humidity alerts\r\n    if (data.humidity > 80) {\r\n      alerts.push({\r\n        id: 'humidity-high',\r\n        type: 'info',\r\n        title: 'High Humidity',\r\n        message: 'High humidity levels may cause discomfort. Consider using a dehumidifier.',\r\n        icon: '💧'\r\n      });\r\n    } else if (data.humidity < 30) {\r\n      alerts.push({\r\n        id: 'humidity-low',\r\n        type: 'info',\r\n        title: 'Low Humidity',\r\n        message: 'Low humidity may cause dry skin and respiratory irritation.',\r\n        icon: '🏜️'\r\n      });\r\n    }\r\n\r\n    // If no alerts, add a positive message\r\n    if (alerts.length === 0) {\r\n      alerts.push({\r\n        id: 'all-good',\r\n        type: 'info',\r\n        title: 'Good Air Quality',\r\n        message: 'Air quality conditions are favorable for outdoor activities.',\r\n        icon: '✅'\r\n      });\r\n    }\r\n\r\n    return alerts;\r\n  };\r\n\r\n  const alerts = generateAlerts(data);\r\n\r\n  const getAlertStyles = (type: Alert['type']) => {\r\n    switch (type) {\r\n      case 'danger':\r\n        return 'bg-red-50 border-red-200 text-red-800 dark:bg-red-900/20 dark:border-red-800 dark:text-red-300';\r\n      case 'warning':\r\n        return 'bg-yellow-50 border-yellow-200 text-yellow-800 dark:bg-yellow-900/20 dark:border-yellow-800 dark:text-yellow-300';\r\n      case 'info':\r\n      default:\r\n        return 'bg-blue-50 border-blue-200 text-blue-800 dark:bg-blue-900/20 dark:border-blue-800 dark:text-blue-300';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"widget-card\">\r\n      <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n        Health Alerts & Recommendations\r\n      </h2>\r\n      \r\n      <div className=\"space-y-3\">\r\n        {alerts.map((alert) => (\r\n          <div\r\n            key={alert.id}\r\n            className={`p-4 rounded-lg border ${getAlertStyles(alert.type)}`}\r\n          >\r\n            <div className=\"flex items-start space-x-3\">\r\n              <span className=\"text-xl flex-shrink-0\">{alert.icon}</span>\r\n              <div className=\"flex-1 min-w-0\">\r\n                <h3 className=\"font-medium mb-1\">{alert.title}</h3>\r\n                <p className=\"text-sm opacity-90\">{alert.message}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Last Updated */}\r\n      <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n        <p className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\r\n          Recommendations updated based on current conditions\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { useAirQuality } from '../context/AirQualityContext';\r\nimport { LoadingSpinner } from './LoadingSpinner';\r\nimport { AQICard } from './AQICard';\r\nimport { WeatherCard } from './WeatherCard';\r\nimport { TrendChart } from './TrendChart';\r\nimport { AlertsPanel } from './AlertsPanel';\r\n\r\nexport const Dashboard = () => {\r\n  const { currentData, historicalData, isLoading, error } = useAirQuality();\r\n\r\n  if (isLoading && !currentData) {\r\n    return (\r\n      <div className=\"flex justify-center py-12\">\r\n        <LoadingSpinner message=\"Loading air quality data...\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error && !currentData) {\r\n    return (\r\n      <div className=\"text-center py-12\">\r\n        <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\r\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\r\n          Data Unavailable\r\n        </h2>\r\n        <p className=\"text-gray-600 dark:text-gray-400\">{error}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      {/* Header Section */}\r\n      <div className=\"text-center\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\r\n          Real-time Air Quality\r\n        </h1>\r\n        <p className=\"text-gray-600 dark:text-gray-400\">\r\n          Monitor air quality conditions in your area\r\n        </p>\r\n      </div>\r\n\r\n      {/* Main Grid */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Left Column - Main AQI Card */}\r\n        <div className=\"lg:col-span-1\">\r\n          <AQICard data={currentData} />\r\n        </div>\r\n\r\n        {/* Right Column - Weather and Alerts */}\r\n        <div className=\"lg:col-span-2 space-y-6\">\r\n          <WeatherCard data={currentData} />\r\n          <AlertsPanel data={currentData} />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Charts Section */}\r\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\r\n        <TrendChart\r\n          data={historicalData}\r\n          title=\"PM2.5 Trend\"\r\n          dataKey=\"pm25\"\r\n          color=\"#ef4444\"\r\n          unit=\"μg/m³\"\r\n        />\r\n        <TrendChart\r\n          data={historicalData}\r\n          title=\"AQI Trend\"\r\n          dataKey=\"aqi\"\r\n          color=\"#3b82f6\"\r\n          unit=\"AQI\"\r\n        />\r\n      </div>\r\n\r\n      {/* Additional Info */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n          About Air Quality Index (AQI)\r\n        </h3>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm\">\r\n          <div className=\"aqi-good border rounded-lg p-3\">\r\n            <div className=\"font-semibold\">Good (0-50)</div>\r\n            <div>Air quality is satisfactory</div>\r\n          </div>\r\n          <div className=\"aqi-moderate border rounded-lg p-3\">\r\n            <div className=\"font-semibold\">Moderate (51-100)</div>\r\n            <div>Acceptable for most people</div>\r\n          </div>\r\n          <div className=\"aqi-unhealthy-sensitive border rounded-lg p-3\">\r\n            <div className=\"font-semibold\">Unhealthy for Sensitive Groups (101-150)</div>\r\n            <div>May cause problems for sensitive individuals</div>\r\n          </div>\r\n          <div className=\"aqi-unhealthy border rounded-lg p-3\">\r\n            <div className=\"font-semibold\">Unhealthy (151-200)</div>\r\n            <div>May cause health problems for everyone</div>\r\n          </div>\r\n          <div className=\"aqi-very-unhealthy border rounded-lg p-3\">\r\n            <div className=\"font-semibold\">Very Unhealthy (201-300)</div>\r\n            <div>Health alert for everyone</div>\r\n          </div>\r\n          <div className=\"aqi-hazardous border rounded-lg p-3\">\r\n            <div className=\"font-semibold\">Hazardous (301+)</div>\r\n            <div>Emergency conditions</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React, { useState } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { useAirQuality } from '../context/AirQualityContext';\r\n\r\nexport const Header = () => {\r\n  const location = useLocation();\r\n  const { lastUpdated, isLoading, refreshData } = useAirQuality();\r\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\r\n\r\n  const navigation = [\r\n    { name: 'Dashboard', href: '/', icon: '📊' },\r\n    { name: 'Historical', href: '/historical', icon: '📈' },\r\n    { name: 'Settings', href: '/settings', icon: '⚙️' }\r\n  ];\r\n\r\n  const isActivePath = (path: string) => {\r\n    return location.pathname === path;\r\n  };\r\n\r\n  const formatLastUpdated = () => {\r\n    if (!lastUpdated) return 'Never';\r\n    return new Intl.DateTimeFormat('en-US', {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit'\r\n    }).format(lastUpdated);\r\n  };\r\n\r\n  return (\r\n    <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\r\n      <div className=\"container mx-auto px-4\">\r\n        <div className=\"flex justify-between items-center h-16\">\r\n          {/* Logo and Title */}\r\n          <div className=\"flex items-center space-x-3\">\r\n            <div className=\"text-2xl\">🌬️</div>\r\n            <div>\r\n              <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\r\n                Air Quality Monitor\r\n              </h1>\r\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                Last updated: {formatLastUpdated()}\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Desktop Navigation */}\r\n          <nav className=\"hidden md:flex items-center space-x-6\">\r\n            {navigation.map((item) => (\r\n              <Link\r\n                key={item.name}\r\n                to={item.href}\r\n                className={`flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\r\n                  isActivePath(item.href)\r\n                    ? 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300'\r\n                    : 'text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700'\r\n                }`}\r\n              >\r\n                <span>{item.icon}</span>\r\n                <span>{item.name}</span>\r\n              </Link>\r\n            ))}\r\n          </nav>\r\n\r\n          {/* Refresh Button and Mobile Menu */}\r\n          <div className=\"flex items-center space-x-4\">\r\n            <button\r\n              onClick={refreshData}\r\n              disabled={isLoading}\r\n              className={`p-2 rounded-lg transition-colors ${\r\n                isLoading\r\n                  ? 'text-gray-400 cursor-not-allowed'\r\n                  : 'text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700'\r\n              }`}\r\n              title=\"Refresh data\"\r\n            >\r\n              <div className={`text-lg ${isLoading ? 'animate-spin' : ''}`}>\r\n                🔄\r\n              </div>\r\n            </button>\r\n\r\n            {/* Mobile menu button */}\r\n            <button\r\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\r\n              className=\"md:hidden p-2 rounded-lg text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700\"\r\n            >\r\n              <div className=\"text-lg\">☰</div>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Mobile Navigation */}\r\n        {isMobileMenuOpen && (\r\n          <div className=\"md:hidden border-t border-gray-200 dark:border-gray-700 py-4\">\r\n            <nav className=\"space-y-2\">\r\n              {navigation.map((item) => (\r\n                <Link\r\n                  key={item.name}\r\n                  to={item.href}\r\n                  onClick={() => setIsMobileMenuOpen(false)}\r\n                  className={`flex items-center space-x-3 px-4 py-3 rounded-lg text-base font-medium transition-colors ${\r\n                    isActivePath(item.href)\r\n                      ? 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300'\r\n                      : 'text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700'\r\n                  }`}\r\n                >\r\n                  <span className=\"text-xl\">{item.icon}</span>\r\n                  <span>{item.name}</span>\r\n                </Link>\r\n              ))}\r\n            </nav>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};","import React from 'react';\r\n\r\nexport const Settings = () => {\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      <div className=\"text-center\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\r\n          Settings\r\n        </h1>\r\n        <p className=\"text-gray-600 dark:text-gray-400\">\r\n          Configure your air quality monitoring preferences\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Notification Settings */}\r\n        <div className=\"widget-card\">\r\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n            Notifications\r\n          </h2>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <div className=\"font-medium text-gray-900 dark:text-white\">\r\n                  AQI Alerts\r\n                </div>\r\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  Get notified when air quality changes\r\n                </div>\r\n              </div>\r\n              <input\r\n                type=\"checkbox\"\r\n                defaultChecked\r\n                className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <div className=\"font-medium text-gray-900 dark:text-white\">\r\n                  Health Recommendations\r\n                </div>\r\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  Receive health and activity suggestions\r\n                </div>\r\n              </div>\r\n              <input\r\n                type=\"checkbox\"\r\n                defaultChecked\r\n                className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Display Settings */}\r\n        <div className=\"widget-card\">\r\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n            Display\r\n          </h2>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-900 dark:text-white mb-2\">\r\n                Temperature Unit\r\n              </label>\r\n              <select className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\">\r\n                <option value=\"celsius\">Celsius (°C)</option>\r\n                <option value=\"fahrenheit\">Fahrenheit (°F)</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-900 dark:text-white mb-2\">\r\n                Theme\r\n              </label>\r\n              <select className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\">\r\n                <option value=\"system\">System Default</option>\r\n                <option value=\"light\">Light</option>\r\n                <option value=\"dark\">Dark</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Location Settings */}\r\n        <div className=\"widget-card\">\r\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n            Location\r\n          </h2>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-900 dark:text-white mb-2\">\r\n                Monitoring Location\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Enter location name\"\r\n                className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder-gray-400\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <div className=\"font-medium text-gray-900 dark:text-white\">\r\n                  Auto-detect Location\r\n                </div>\r\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  Use your device's location for accurate readings\r\n                </div>\r\n              </div>\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Data Settings */}\r\n        <div className=\"widget-card\">\r\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n            Data & Updates\r\n          </h2>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-900 dark:text-white mb-2\">\r\n                Update Frequency\r\n              </label>\r\n              <select className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\">\r\n                <option value=\"1\">Every minute</option>\r\n                <option value=\"5\" selected>Every 5 minutes</option>\r\n                <option value=\"15\">Every 15 minutes</option>\r\n                <option value=\"30\">Every 30 minutes</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-900 dark:text-white mb-2\">\r\n                Data Retention\r\n              </label>\r\n              <select className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\">\r\n                <option value=\"7\">7 days</option>\r\n                <option value=\"30\" selected>30 days</option>\r\n                <option value=\"90\">90 days</option>\r\n                <option value=\"365\">1 year</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Action Buttons */}\r\n      <div className=\"flex justify-center space-x-4\">\r\n        <button className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors\">\r\n          Save Settings\r\n        </button>\r\n        <button className=\"bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-lg transition-colors\">\r\n          Reset to Defaults\r\n        </button>\r\n      </div>\r\n\r\n      {/* System Info */}\r\n      <div className=\"widget-card\">\r\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n          System Information\r\n        </h2>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\r\n          <div className=\"flex justify-between\">\r\n            <span className=\"text-gray-600 dark:text-gray-400\">Version:</span>\r\n            <span className=\"font-medium text-gray-900 dark:text-white\">1.0.0</span>\r\n          </div>\r\n          <div className=\"flex justify-between\">\r\n            <span className=\"text-gray-600 dark:text-gray-400\">Last Update:</span>\r\n            <span className=\"font-medium text-gray-900 dark:text-white\">Just now</span>\r\n          </div>\r\n          <div className=\"flex justify-between\">\r\n            <span className=\"text-gray-600 dark:text-gray-400\">Data Source:</span>\r\n            <span className=\"font-medium text-gray-900 dark:text-white\">ThingSpeak API</span>\r\n          </div>\r\n          <div className=\"flex justify-between\">\r\n            <span className=\"text-gray-600 dark:text-gray-400\">Status:</span>\r\n            <span className=\"font-medium text-green-600\">🟢 Online</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { useAirQuality } from '../context/AirQualityContext';\r\nimport { LoadingSpinner } from './LoadingSpinner';\r\n\r\nexport const Historical = () => {\r\n  const { historicalData, fetchHistoricalData, isLoading, error } = useAirQuality();\r\n  const [selectedPeriod, setSelectedPeriod] = useState(7);\r\n  const [selectedMetric, setSelectedMetric] = useState('aqi');\r\n\r\n  useEffect(() => {\r\n    fetchHistoricalData(selectedPeriod);\r\n  }, [selectedPeriod, fetchHistoricalData]);\r\n\r\n  const periods = [\r\n    { value: 1, label: '24 Hours' },\r\n    { value: 7, label: '7 Days' },\r\n    { value: 30, label: '30 Days' },\r\n    { value: 90, label: '90 Days' }\r\n  ];\r\n\r\n  const metrics = [\r\n    { value: 'aqi', label: 'Air Quality Index', unit: 'AQI' },\r\n    { value: 'pm25', label: 'PM2.5', unit: 'μg/m³' },\r\n    { value: 'pm10', label: 'PM10', unit: 'μg/m³' },\r\n    { value: 'temperature', label: 'Temperature', unit: '°C' },\r\n    { value: 'humidity', label: 'Humidity', unit: '%' }\r\n  ];\r\n\r\n  const getMetricStats = (data: any[], metric: string) => {\r\n    if (!data || data.length === 0) return null;\r\n\r\n    const values = data.map(item => Number(item[metric])).filter(val => !isNaN(val));\r\n    if (values.length === 0) return null;\r\n\r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n    const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\r\n\r\n    return { min, max, avg };\r\n  };\r\n\r\n  const stats = getMetricStats(historicalData, selectedMetric);\r\n  const currentMetric = metrics.find(m => m.value === selectedMetric);\r\n\r\n  if (isLoading && historicalData.length === 0) {\r\n    return (\r\n      <div className=\"flex justify-center py-12\">\r\n        <LoadingSpinner message=\"Loading historical data...\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      <div className=\"text-center\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\r\n          Historical Data\r\n        </h1>\r\n        <p className=\"text-gray-600 dark:text-gray-400\">\r\n          Analyze air quality trends over time\r\n        </p>\r\n      </div>\r\n\r\n      {/* Controls */}\r\n      <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\r\n        <div>\r\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n            Time Period\r\n          </label>\r\n          <select\r\n            value={selectedPeriod}\r\n            onChange={(e) => setSelectedPeriod(Number(e.target.value))}\r\n            className=\"p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n          >\r\n            {periods.map(period => (\r\n              <option key={period.value} value={period.value}>\r\n                {period.label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div>\r\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n            Metric\r\n          </label>\r\n          <select\r\n            value={selectedMetric}\r\n            onChange={(e) => setSelectedMetric(e.target.value)}\r\n            className=\"p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n          >\r\n            {metrics.map(metric => (\r\n              <option key={metric.value} value={metric.value}>\r\n                {metric.label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistics Cards */}\r\n      {stats && currentMetric && (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n          <div className=\"widget-card text-center\">\r\n            <div className=\"text-3xl mb-2\">📉</div>\r\n            <div className=\"text-2xl font-bold text-blue-600\">\r\n              {stats.min.toFixed(1)}\r\n            </div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n              Minimum {currentMetric.label} ({currentMetric.unit})\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"widget-card text-center\">\r\n            <div className=\"text-3xl mb-2\">📊</div>\r\n            <div className=\"text-2xl font-bold text-green-600\">\r\n              {stats.avg.toFixed(1)}\r\n            </div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n              Average {currentMetric.label} ({currentMetric.unit})\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"widget-card text-center\">\r\n            <div className=\"text-3xl mb-2\">📈</div>\r\n            <div className=\"text-2xl font-bold text-red-600\">\r\n              {stats.max.toFixed(1)}\r\n            </div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n              Maximum {currentMetric.label} ({currentMetric.unit})\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Data Table */}\r\n      <div className=\"widget-card overflow-hidden\">\r\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n          Recent Readings\r\n        </h2>\r\n        \r\n        {error && (\r\n          <div className=\"text-center py-8\">\r\n            <div className=\"text-red-500 text-4xl mb-2\">⚠️</div>\r\n            <p className=\"text-red-600\">{error}</p>\r\n          </div>\r\n        )}\r\n\r\n        {historicalData.length === 0 && !error ? (\r\n          <div className=\"text-center py-8\">\r\n            <div className=\"text-gray-400 text-4xl mb-2\">📋</div>\r\n            <p className=\"text-gray-500 dark:text-gray-400\">No historical data available</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"w-full text-sm\">\r\n              <thead>\r\n                <tr className=\"border-b border-gray-200 dark:border-gray-700\">\r\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-900 dark:text-white\">\r\n                    Timestamp\r\n                  </th>\r\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-900 dark:text-white\">\r\n                    AQI\r\n                  </th>\r\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-900 dark:text-white\">\r\n                    PM2.5\r\n                  </th>\r\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-900 dark:text-white\">\r\n                    PM10\r\n                  </th>\r\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-900 dark:text-white\">\r\n                    Temperature\r\n                  </th>\r\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-900 dark:text-white\">\r\n                    Humidity\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {historicalData.slice(0, 50).map((reading, index) => (\r\n                  <tr\r\n                    key={index}\r\n                    className=\"border-b border-gray-100 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n                  >\r\n                    <td className=\"py-3 px-4 text-gray-900 dark:text-white\">\r\n                      {new Date(reading.timestamp).toLocaleString()}\r\n                    </td>\r\n                    <td className=\"py-3 px-4 text-center\">\r\n                      <span className={`inline-block px-2 py-1 rounded text-sm font-medium ${\r\n                        reading.aqi <= 50 ? 'bg-green-100 text-green-800' :\r\n                        reading.aqi <= 100 ? 'bg-yellow-100 text-yellow-800' :\r\n                        reading.aqi <= 150 ? 'bg-orange-100 text-orange-800' :\r\n                        reading.aqi <= 200 ? 'bg-red-100 text-red-800' :\r\n                        'bg-purple-100 text-purple-800'\r\n                      }`}>\r\n                        {reading.aqi}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"py-3 px-4 text-center text-gray-900 dark:text-white\">\r\n                      {reading.pm25} μg/m³\r\n                    </td>\r\n                    <td className=\"py-3 px-4 text-center text-gray-900 dark:text-white\">\r\n                      {reading.pm10} μg/m³\r\n                    </td>\r\n                    <td className=\"py-3 px-4 text-center text-gray-900 dark:text-white\">\r\n                      {reading.temperature}°C\r\n                    </td>\r\n                    <td className=\"py-3 px-4 text-center text-gray-900 dark:text-white\">\r\n                      {reading.humidity}%\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n        \r\n        {historicalData.length > 50 && (\r\n          <div className=\"mt-4 text-center\">\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n              Showing latest 50 readings of {historicalData.length} total\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React, { Component } from 'react';\r\n\r\ninterface ErrorBoundaryState {\r\n  hasError: boolean;\r\n  error: Error | null;\r\n  errorInfo: any;\r\n}\r\n\r\ninterface ErrorBoundaryProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\r\n  constructor(props: ErrorBoundaryProps) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n      error: null,\r\n      errorInfo: null\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: any) {\r\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\r\n    this.setState({\r\n      error,\r\n      errorInfo\r\n    });\r\n  }\r\n\r\n  handleRetry = () => {\r\n    this.setState({\r\n      hasError: false,\r\n      error: null,\r\n      errorInfo: null\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center p-4\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 max-w-md w-full text-center\">\r\n            <div className=\"text-red-500 text-6xl mb-4\">🚨</div>\r\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\r\n              Something went wrong\r\n            </h1>\r\n            <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\r\n              An unexpected error occurred. Please try refreshing the page or contact support if the problem persists.\r\n            </p>\r\n            \r\n            {process.env.NODE_ENV === 'development' && this.state.error && (\r\n              <details className=\"mb-6 text-left\">\r\n                <summary className=\"cursor-pointer text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Error Details (Development)\r\n                </summary>\r\n                <pre className=\"text-xs bg-gray-100 dark:bg-gray-700 p-3 rounded overflow-auto max-h-40\">\r\n                  {this.state.error.toString()}\r\n                  {this.state.errorInfo?.componentStack}\r\n                </pre>\r\n              </details>\r\n            )}\r\n            \r\n            <div className=\"space-x-4\">\r\n              <button\r\n                onClick={this.handleRetry}\r\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors\"\r\n              >\r\n                Try Again\r\n              </button>\r\n              <button\r\n                onClick={() => window.location.reload()}\r\n                className=\"bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-lg transition-colors\"\r\n              >\r\n                Reload Page\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport { Dashboard } from './components/Dashboard';\r\nimport { Header } from './components/Header';\r\nimport { Settings } from './components/Settings';\r\nimport { Historical } from './components/Historical';\r\nimport { AirQualityProvider } from './context/AirQualityContext';\r\nimport { LoadingSpinner } from './components/LoadingSpinner';\r\nimport { ErrorBoundary } from './components/ErrorBoundary';\r\n\r\ninterface AppState {\r\n  isLoading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst App = () => {\r\n  const [appState, setAppState] = useState<AppState>({\r\n    isLoading: true,\r\n    error: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Check if backend API is available\r\n    const checkApiHealth = async () => {\r\n      try {\r\n        const response = await fetch('/api/health');\r\n        if (!response.ok) {\r\n          throw new Error('API health check failed');\r\n        }\r\n        setAppState({ isLoading: false, error: null });\r\n      } catch (error: any) {\r\n        console.error('API health check failed:', error);\r\n        setAppState({ \r\n          isLoading: false, \r\n          error: 'Unable to connect to backend API. Please check your connection.' \r\n        });\r\n      }\r\n    };\r\n\r\n    checkApiHealth();\r\n  }, []);\r\n\r\n  if (appState.isLoading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n        <LoadingSpinner message=\"Initializing Air Quality Monitor...\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (appState.error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n        <div className=\"text-center p-8\">\r\n          <div className=\"text-red-600 text-6xl mb-4\">⚠️</div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\r\n            Connection Error\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">{appState.error}</p>\r\n          <button\r\n            onClick={() => window.location.reload()}\r\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors\"\r\n          >\r\n            Retry Connection\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ErrorBoundary>\r\n      <AirQualityProvider>\r\n        <Router>\r\n          <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\r\n            <Header />\r\n            <main className=\"container mx-auto px-4 py-8\">\r\n              <Routes>\r\n                <Route path=\"/\" element={<Dashboard />} />\r\n                <Route path=\"/historical\" element={<Historical />} />\r\n                <Route path=\"/settings\" element={<Settings />} />\r\n              </Routes>\r\n            </main>\r\n          </div>\r\n        </Router>\r\n      </AirQualityProvider>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nconst container = document.getElementById('root');\r\nif (!container) throw new Error('Failed to find the root element');\r\n\r\nconst root = createRoot(container);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);"],"names":["React","require$$0","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_OFFSCREEN_TYPE","MAYBE_ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","ReactSharedInternals","error","format","_len2","args","_key2","printWarning","level","ReactDebugCurrentFrame","stack","argsWithFormat","item","enableScopeAPI","enableCacheElement","enableTransitionTracing","enableLegacyHidden","enableDebugTracing","REACT_MODULE_REFERENCE","isValidElementType","type","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","getContextName","getComponentNameFromType","context","provider","outerName","lazyComponent","payload","init","assign","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","disabledLog","disableLogs","props","reenableLogs","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","name","source","ownerFn","x","match","reentry","componentFrameCache","PossiblyWeakMap","describeNativeComponentFrame","fn","construct","frame","control","previousPrepareStackTrace","previousDispatcher","Fake","sample","sampleLines","controlLines","s","c","_frame","syntheticFrame","describeFunctionComponentFrame","shouldConstruct","Component","prototype","describeUnknownElementTypeFrameInDEV","hasOwnProperty","loggedTypeFailures","setCurrentlyValidatingElement","element","owner","checkPropTypes","typeSpecs","values","location","componentName","has","typeSpecName","error$1","err","ex","isArrayImpl","isArray","a","typeName","value","hasToStringTag","willCoercionThrow","testStringCoercion","checkKeyStringCoercion","ReactCurrentOwner","RESERVED_PROPS","specialPropKeyWarningShown","specialPropRefWarningShown","didWarnAboutStringRefs","hasValidRef","config","getter","hasValidKey","warnIfStringRefCannotBeAutoConverted","self","defineKeyPropWarningGetter","warnAboutAccessingKey","defineRefPropWarningGetter","warnAboutAccessingRef","ReactElement","key","ref","jsxDEV","maybeKey","propName","defaultProps","ReactCurrentOwner$1","ReactDebugCurrentFrame$1","setCurrentlyValidatingElement$1","propTypesMisspellWarningShown","isValidElement","object","getDeclarationErrorAddendum","getSourceInfoErrorAddendum","fileName","lineNumber","ownerHasKeyUseWarning","getCurrentComponentErrorInfo","parentType","info","parentName","validateExplicitKey","currentComponentErrorInfo","childOwner","validateChildKeys","node","i","child","iteratorFn","iterator","step","validatePropTypes","propTypes","_name","validateFragmentProps","fragment","keys","didWarnAboutKeySpread","jsxWithValidation","isStaticChildren","validType","sourceInfo","typeString","children","k","beforeExample","afterExample","jsxDEV$1","reactJsxDevRuntime_development","jsxDevRuntimeModule","m","createRoot","o","_extends","target","Action","PopStateEventType","createBrowserHistory","options","createBrowserLocation","window","globalHistory","pathname","search","hash","createLocation","createBrowserHref","to","createPath","getUrlBasedHistory","invariant","message","warning","cond","createKey","getHistoryState","index","current","state","parsePath","_ref","path","parsedPath","hashIndex","searchIndex","getLocation","createHref","validateLocation","v5Compat","action","listener","getIndex","handlePop","nextIndex","delta","history","push","historyState","url","replace","createURL","base","href","n","ResultType","matchRoutes","routes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","parentsMeta","parentPath","flattenRoute","route","relativePath","meta","joinPaths","routesMeta","computeScore","_route$path","exploded","explodeOptionalSegments","segments","first","rest","isOptional","required","restExploded","result","subpath","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","initialScore","score","segment","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","normalizePathname","pattern","matcher","compiledParams","compilePath","pathnameBase","captureGroups","memo","paramName","splatValue","caseSensitive","params","regexpSource","_","v","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","idx","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","isRouteErrorResponse","validMutationMethodsArr","validRequestMethodsArr","DataRouterContext","React.createContext","DataRouterStateContext","AwaitContext","NavigationContext","LocationContext","RouteContext","RouteErrorContext","useHref","_temp","relative","useInRouterContext","UNSAFE_invariant","navigator","React.useContext","useResolvedPath","joinedPathname","useLocation","navigateEffectWarning","useIsomorphicLayoutEffect","cb","React.useLayoutEffect","useNavigate","isDataRoute","useNavigateStable","useNavigateUnstable","dataRouterContext","future","routePathnamesJson","UNSAFE_getResolveToMatches","activeRef","React.useRef","React.useCallback","UNSAFE_warning","_temp2","React.useMemo","useRoutes","useRoutesImpl","dataRouterState","parentMatches","routeMatch","parentParams","parentPathname","parentPathnameBase","parentRoute","warningOnce","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","parentSegments","renderedMatches","_renderMatches","React.createElement","DefaultErrorComponent","useRouteError","lightgrey","preStyles","codeStyles","devInfo","React.Fragment","defaultErrorElement","RenderErrorBoundary","React.Component","errorInfo","RenderedRoute","routeContext","_dataRouterState","_future","errors","errorIndex","renderFallback","fallbackIndex","loaderData","needsToRunLoader","outlet","shouldRenderHydrateFallback","errorElement","hydrateFallbackElement","getChildren","DataRouterHook","DataRouterStateHook","getDataRouterConsoleError","hookName","useDataRouterContext","ctx","useDataRouterState","useRouteContext","useCurrentRouteId","thisRoute","useRouteId","_state$errors","routeId","router","id","alreadyWarned$1","alreadyWarned","warnOnce","logDeprecation","flag","msg","link","logV6DeprecationWarnings","renderFuture","routerFuture","Route","_props","Router","_ref5","basenameProp","locationProp","navigationType","staticProp","navigationContext","locationContext","trailingPathname","Routes","_ref6","createRoutesFromChildren","React.Children","React.isValidElement","treePath","_objectWithoutPropertiesLoose","excluded","sourceKeys","defaultMethod","defaultEncType","isHtmlElement","isButtonElement","isFormElement","isInputElement","isModifiedEvent","event","shouldProcessLinkClick","_formDataSupportsSubmitter","isFormDataSubmitterSupported","supportedFormEncTypes","getFormEncType","encType","getFormSubmissionInfo","method","formData","body","attr","form","_excluded","_excluded2","_excluded3","REACT_ROUTER_VERSION","ViewTransitionContext","FetchersContext","START_TRANSITION","startTransitionImpl","BrowserRouter","_ref4","historyRef","setStateImpl","React.useState","v7_startTransition","setState","newState","React.useEffect","UNSAFE_logV6DeprecationWarnings","isBrowser","ABSOLUTE_URL_REGEX","Link","React.forwardRef","_ref7","onClick","reloadDocument","preventScrollReset","viewTransition","UNSAFE_NavigationContext","absoluteHref","isExternal","currentUrl","targetUrl","internalOnClick","useLinkClickHandler","handleClick","NavLink","_ref8","ariaCurrentProp","classNameProp","styleProp","routerState","UNSAFE_DataRouterStateContext","isTransitioning","useViewTransitionState","nextLocationPathname","endSlashPosition","isActive","isPending","renderProps","ariaCurrent","className","style","Form","_ref9","forwardedRef","fetcherKey","navigate","onSubmit","submit","useSubmit","formAction","useFormAction","formMethod","submitHandler","submitter","submitMethod","UNSAFE_DataRouterContext","replaceProp","validateClientSideSubmission","fetcherId","getUniqueFetcherId","currentRouteId","UNSAFE_useRouteId","UNSAFE_RouteContext","indexValues","qs","opts","vtContext","currentPath","nextPath","AirQualityContext","createContext","AirQualityProvider","currentData","setCurrentData","useState","historicalData","setHistoricalData","isLoading","setIsLoading","setError","lastUpdated","setLastUpdated","fetchCurrentData","useCallback","response","data","errorMessage","fetchHistoricalData","days","refreshData","useEffect","interval","contextValue","this","useAirQuality","useContext","LoadingSpinner","size","currentSizeClass","AQICard","getAQIColor","aqi","aqiInfo","colorClasses","WeatherCard","getTemperatureColor","temp","getHumidityColor","humidity","TrendChart","title","dataKey","color","unit","currentValue","_a","previousValue","_b","trend","recentData","maxValue","minValue","height","AlertsPanel","alerts","getAlertStyles","alert","Dashboard","Header","isMobileMenuOpen","setIsMobileMenuOpen","navigation","isActivePath","formatLastUpdated","Settings","Historical","selectedPeriod","setSelectedPeriod","selectedMetric","setSelectedMetric","periods","metrics","stats","metric","val","min","max","avg","sum","currentMetric","e","period","reading","ErrorBoundary","__publicField","App","appState","setAppState","container","root"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}